/* MapperParser.java */
/* Generated By:JavaCC: Do not edit this line. MapperParser.java */
package com.opdar.framework.db.parser;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
/** Simple brace matcher. */
public class MapperParser implements MapperParserConstants {
  /** Main entry point. */
  private MapperCallback mapperCallback;
  private Callback callback = new Callback() {
      @Override
      public void call(Object[] vars) {
          String sql = vars[2].toString();
          int end = 0;
          Mapper mapper = new Mapper();
          mapper.namespace = vars[0].toString();
          mapper.method = vars[1].toString();
          mapper.prototype = sql;
          while (true){
              if(end == sql.length())break;
              int start = sql.indexOf("${",end);
              if(start < 0){
                  if(end != sql.length()){
                      start = sql.length();
                  }
              }
              String string = sql.substring(end,start);
              mapper.add(string);
              if(start == sql.length())break;
              int start2 = sql.indexOf("}",end);
              String key = sql.substring(start+2,start2);
              com.opdar.framework.db.parser.Mapper.Parameter p = new com.opdar.framework.db.parser.Mapper.Parameter();
              p.key = key;
              mapper.add(p);
              end = start2+1;
          }
          if(mapperCallback != null)mapperCallback.call(mapper);
      }
  };


  public void setMapperCallback(MapperCallback mapperCallback) {
      this.mapperCallback = mapperCallback;
  }

  public void setCallback(Callback callback) {
      this.callback = callback;
  }

  public static void main(String args[]) throws ParseException {
      try {
          FileInputStream fileInputStream = new FileInputStream(new File("E:\u005c\u005cOSWorkspace\u005c\u005cSeed\u005c\u005cSeed-Database\u005c\u005csrc\u005c\u005cmain\u005c\u005cresources\u005c\u005ctest.mapper"));
          MapperParser parser = new MapperParser(fileInputStream);

          parser.parse();
      } catch (FileNotFoundException e) {
          e.printStackTrace();
      }
  }

  final public void parse() throws ParseException {
while(token(null) != null){}
  }

  final public void cache() throws ParseException {
while(cacheToken() != null){}
  }

  final public Object cacheToken() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOLLER:
    case IDENTIFIER:{
Token name = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        name = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
System.out.println(name);
      jj_consume_token(DOLLER);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        name = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
System.out.println(name);{if ("" != null) return "";}
      break;
      }
    case SHARP:{
Token name = null;
      jj_consume_token(SHARP);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        name = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
System.out.println(name);{if ("" != null) return "";}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return null;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object token(Token name) throws ParseException {Object token = null;
    Token namespace = name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      jj_consume_token(VAR);
      vars(namespace);
      jj_consume_token(SEMICOLON);
{if ("" != null) return "";}
      break;
      }
    case NAMESPACE:{
Token _namespace = null;
      jj_consume_token(NAMESPACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTED_STRING:{
        _namespace = jj_consume_token(QUOTED_STRING);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
trimQuoted(_namespace);
    if(namespace != null){
        _namespace.image = namespace.image+"."+_namespace.image;
    }
      jj_consume_token(LBRACE);
while(!token(_namespace).equals("RBRACE")){
            }
{if ("" != null) return "";}
      break;
      }
    case RBRACE:{
      jj_consume_token(RBRACE);
{if ("" != null) return "RBRACE";}
      break;
      }
    case ASTERISK:{
Token asteriskKey = null;Token asteriskValue = null;
      jj_consume_token(ASTERISK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        asteriskKey = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(EQUALS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTED_STRING:{
        asteriskValue = jj_consume_token(QUOTED_STRING);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
trimQuoted(asteriskValue);
      jj_consume_token(SEMICOLON);
try{
  callback.call(name,asteriskKey,asteriskValue);}catch(Exception ignore){}
{if ("" != null) return "";}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return null;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object vars(Token name) throws ParseException {Token namespace = name;
Token varName = null;Token varValue = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      varName = jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(EQUALS);
varValue = values(name);
System.out.println(varName+"="+varValue);
{if ("" != null) return "";}
    throw new Error("Missing return statement in function");
  }

  final public Token values(Token name) throws ParseException {Token namespace = name;Token value = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTED_STRING:
    case DOUBLE_QUOTED:
    case CONSTANT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTANT:{
        value = jj_consume_token(CONSTANT);
        break;
        }
      case QUOTED_STRING:{
        value = jj_consume_token(QUOTED_STRING);
trimQuoted(value);
        break;
        }
      case DOUBLE_QUOTED:{
        value = jj_consume_token(DOUBLE_QUOTED);
trimQuoted(value);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public void trimQuoted(Token quotedString) throws ParseException {Token value = null;
quotedString.image = quotedString.image.substring(1,quotedString.image.length() - 1);
        quotedString.image = quotedString.image.replaceAll("\u005c\u005c\u005c\u005c\u005c"","\u005c"");
  }

  /** Generated Token Manager. */
  public MapperParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x40000,0x40000,0x46001,0x200000,0x40000,0x200000,0x361,0x40000,0xe00000,0xe00000,};
   }

  /** Constructor with InputStream. */
  public MapperParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MapperParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MapperParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MapperParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MapperParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MapperParser(MapperParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MapperParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
